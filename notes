Notes:

Process to follow when adding a new expression to the parser:
	Create the rule
	Create the corresponding AST type, inheriting from node_impl using CRTP
	Add a static function make() to the AST type that creates an unique_ptr to the type
	Create a selector for the rule and add the selector to the list of selectors
		If the rule has children, set their parent to point to the current AST node
	Create a visitor for the AST node if it has children
	Check if the new rule breaks any assumptions made by other code
	Add checks for semantic validity in semantic_checker.cpp

Fields of units that can be used freely:
	animSpeed
	bodyPower
	bounceDistMax
	bounceDistMin
	bouncePower
	buildTime (divide modifier by 20)
	cargoUse
	cost
	dustCreationChance (multiply modifier by 20)
	healthbarOffset
	healthbarWidth
	height
	lifesteal
	lifetime (divide modifier by 20)
	limit
	oscillationAmplitude
	percDmg
	power
	projectileLen
	projectileStartHeight
	selectionOffsetY
	size
	startHp
	startMana
	supply
	supplyProvided
	tabPriority
	vision
	visionHeightBonus

	All checks for scaled quantities should not be equalities but tight inequalities
