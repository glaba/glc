3 member operators:
unit::field: a field that is built-in to the game
unit.field: a field that is defined within a trait
unit->field: a field that is provided by the language 

Global variables:
time: Game time

Modifiers:
	name, description, image: we can generate these from if statements using unit->displayModifier
	duration: for duration statement
	maxStack: can be simulated
	aura: for in range
	auraHits___: isAlly, isEnemy, isSelf and if statements
	auraTargetFilters / exclude: "with" command or if statements
	disabledCommands: nothing with abilities supported yet
	changeUnitImg: this would be implemented with a regular if and compiled down to changeUnitImg
	changeAttackEffect: same as above
	effects / sound: unsure
	killModifiers: regular assignment statements

Statements:
transition if - if <value> -> <constant> { <body> }
	If the value changes from something else to the constant, the body is evaluated once at that instant
continuous if - if <condition> { <body> }
	If the condition is true, the body is continuously evaluated as long as the condition is true
for duration - for <duration>: { <body> } OR for <duration>: <statement>
	The body is continuously evaluated starting from the moment the for duration statement is evaluated until <duration> amount of time after
	The total time spent in the body for any uninterrupted stretch is exactly equal to the amount of time the for duration statement itself is evaluated plus <duration> amount of time afterwards
for in - for <identifier> in <range> [with trait <combination of traits>] { <body> }
	Evaluates the body for each unit in the specified range that matches the traits given
	The field <combination of traits> is generated by the following grammar:
		<CoT> : <CoT> or <CoT> | <list of traits> | epsilon
	with a fairly obvious meaning. Only fields and functions allowed are those shared between all required traits.
	For example: T1, T2 or T1, T3 will only allow you to use fields and functions from T1

Built-in traits:
	Mechanical, Undead, Biological, Beast, Human, Flying, UniqueAndHeroic
	Building, Unit,
	Type<unit id, unit id, ...>: matches only the units with the given IDs

Built-in fields / functions:
	unit->age
	unit->isAlly(unit), unit->isEnemy(unit), unit->isSelf(unit)
	unit->displayModifier(name, description, image)
	unit->range()

Applying traits to units / buildings:
	unit / building <unit / building name> : <list of traits applying to unit / building>

Custom functions:
We can have custom functions within traits, which are of the form
	<function name>(<parameters>) {
		<body>
	}
where the body is the same as an always block. Additionally, functions can return a value at the end a la Rust